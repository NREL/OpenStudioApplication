name: C/C++ CI for OpenStudioApplication

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  OS_SDK_VERSION: 3.0.1
  BUILD_TYPE: Release
  BUILD_DOCUMENTATION: OFF
  BUILD_TESTING: ON
  BUILD_PACKAGE: ON
  CPACK_BINARY_NSIS: OFF
  CPACK_BINARY_RPM: OFF
  CPACK_BINARY_STGZ: OFF
  CPACK_BINARY_TBZ2: OFF
  CPACK_BINARY_TGZ: OFF
  CPACK_BINARY_TXZ: OFF
  CPACK_BINARY_TZ: OFF
  CPACK_SOURCE_RPM:BOOL: OFF
  CPACK_SOURCE_TBZ2:BOOL: OFF
  CPACK_SOURCE_TGZ:BOOL: OFF
  CPACK_SOURCE_TXZ:BOOL: OFF
  CPACK_SOURCE_TZ:BOOL: OFF
  CPACK_SOURCE_ZIP:BOOL: OFF
  # CPACK_BINARY_DEB: OS-SPECIFIC
  # CPACK_BINARY_IFW: OS-SPECIFIC

jobs:
  build:
    # runs-on: ubuntu-18.04
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        include:
        - os: ubuntu-18.04
          PLATFORM_NAME: Linux
          CPACK_BINARY_DEB: ON
          CPACK_BINARY_IFW: OFF
          BINARY_EXT: deb
        - os: windows-2019
          PLATFORM_NAME: Windows
          CPACK_BINARY_DEB: OFF
          CPACK_BINARY_IFW: ON
          BINARY_EXT: exe
        - os: macos-10.15
          PLATFORM_NAME: Darwin
          CPACK_BINARY_DEB: OFF
          CPACK_BINARY_IFW: ON
          BINARY_EXT: dmg

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'

    - name: Extract OSApp version from CMakeLists.txt
      shell: python
      run: |
        import re
        with open('CMakeLists.txt', 'r') as f:
            content = f.read()
        m = re.search('project\(OpenStudioApplication VERSION (\d+\.\d+\.\d+)\)', content)
        version='X.Y.Z'
        if m:
            version = m.groups()[0]
        with open('version.txt', 'w') as f:
            f.write(version)


    - name: Set OS-specific options and system dependencies
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        OS_APP_VERSION=$(cat version.txt)
        echo "::set-env name=OS_APP_VERSION::$OS_APP_VERSION"

        echo "::set-env name=PLATFORM_NAME::${{ matrix.PLATFORM_NAME }}"
        echo "::set-env name=CPACK_BINARY_DEB::${{ matrix.CPACK_BINARY_DEB }}"
        echo "::set-env name=CPACK_BINARY_IFW::${{ matrix.CPACK_BINARY_IFW }}"
        echo "::set-env name=BINARY_EXT::${{ matrix.BINARY_EXT }}"

        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Install needed system dependencies for OPENGL (due to Qt) for Linux"
          sudo apt install mesa-common-dev libglu1-mesa-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          true
        elif [ "$RUNNER_OS" == "macOS" ]; then
          true
        fi;

    - name: Cache OpenStudio tar.gz
      # To avoid downloading the SDK all the time, we try to cache it
      id: cacheossdk
      uses: actions/cache@v2
      with:
        path: OpenStudio-${{ env.OS_SDK_VERSION }}
        key: OpenStudio-SDK-${{ runner.os }}-${{ env.OS_SDK_VERSION }}

    - name: Download the OpenStudio installer
      # If the SDK wasn't found in the cache
      if: steps.cacheossdk.outputs.cache-hit != 'true'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      # Note: wget not available on windows, even in bash, so use curl
      shell: bash
      run: |
        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/NREL/OpenStudio/releases/tags/v$OS_SDK_VERSION > os_tag.json
        echo "PLATFORM_NAME=${{ env.PLATFORM_NAME }}"
        cat os_tag.json
        tar_gz_link=$(cat os_tag.json | jq -r '.assets | .[] | select(.name | contains("${{ env.PLATFORM_NAME }}")) | select(.name | contains("tar.gz")) | .browser_download_url')
        if [ -z "$tar_gz_link" ]; then
          echo "Could not locate the OpenStudio tar.gz for OS_SDK_VERSION=$OS_SDK_VERSION and PLATFORM_NAME=$PLATFORM_NAME"
          exit 1;
        fi;
        tar_gz_name=$(basename -- $tar_gz_link)
        echo "Downloading $tar_gz_link"
        curl -O "$tar_gz_link"
        ls
        echo "Extract this into the OpenStudio-$OS_SDK_VERSION directory, omitting the first directory level in the tar.gz"
        echo "This isn't working, so use cmake to tar, then rename"
        echo "tar xfz $tar_gz_name --strip-components 1 -C OpenStudio-$OS_SDK_VERSION"
        echo "cmake -E make_directory OpenStudio-$OS_SDK_VERSION"
        folder_name=${tar_gz_name%.tar.gz}
        echo "folder_name=$folder_name"
        cmake -E tar xfz "$tar_gz_name"
        cmake -E rename "$folder_name" "OpenStudio-$OS_SDK_VERSION"


    - name: Install conan
      run: |
          python --version
          pip install conan
          conan --version

    - name: Cache conan cache?
      # To avoid downloading the SDK all the time, we try to cache it
      id: cacheconan
      uses: actions/cache@v2
      with:
        path: ~/.conan
        key: conan-cache

    - name: Did restoring the conan-cache work? No
      # If the SDK wasn't found in the cache
      if: steps.cacheconan.outputs.cache-hit != 'true'
      run: |
          echo "Conan cache not found"

    - name: Did restoring the conan-cache work? Yes
      # If the SDK wasn't found in the cache
      if: steps.cacheconan.outputs.cache-hit == 'true'
      run: |
          ls ~/.conan/
          ls ~/.conan/data/

    - name: Cache entire build directory
      id: cachebuild
      uses: actions/cache@v2
      with:
        path: build/
        key: build-cache

    - name: Did restoring the build-cache work? No
      # If the SDK wasn't found in the cache
      if: steps.cachebuild.outputs.cache-hit != 'true'
      run: |
          echo "Build cache not found"

    - name: Did restoring the build-cache work? Yes
      # If the SDK wasn't found in the cache
      if: steps.cachebuild.outputs.cache-hit == 'true'
      run: |
          ls build/
          cat build/CMakeCache.txt

    - name: Create Build Environment and locate openstudio
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        openstudio_DIR=$(find `pwd`/OpenStudio-$OS_SDK_VERSION/ -name "openstudioConfig.cmake")
        openstudio_DIR=$(dirname "${openstudio_DIR}")
        echo "openstudio_DIR=${openstudio_DIR}"
        echo "::set-env name=openstudio_DIR::$openstudio_DIR"
        cmake -E make_directory ./build


    #- name: Cache Qt dep cache?
      ## To avoid downloading the Qt dependency all the time, we try to cache it
      #id: cacheqt
      #uses: actions/cache@v2
      #with:
        #path: build/qt_5_11_*.tar.gz
        #key: qt-5-11-cache

    #- name: Did restoring the qt cache work?
      ## If the SDK wasn't found in the cache
      #if: steps.cacheqt.outputs.cache-hit != 'true'
      #run: |
          #echo "qt tar.gz was not found"

    #- name: Cache other dependencies
      ## Should probably cache the CMake-downloaded Qt at least
      #shell: bash
      #run: |
          #echo "Not implemented yet"
          #echo "The more I think about it, the more I think we should cache the entire build/ directory to speed up builds"
          #echo "We can use a manual counter in the key so we can effectively wipe the build directory when we want to"

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ./build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        openstudio_DIR=$openstudio_DIR cmake $CMAKE_GENERATOR $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_DOCUMENTATION=$DBUILD_DOCUMENTATION -DBUILD_TESTING=$BUILD_TESTING -DBUILD_PACKAGE=$BUILD_PACKAGE -DCPACK_BINARY_DEB=$CPACK_BINARY_DEB -DCPACK_BINARY_IFW=$CPACK_BINARY_IFW -DCPACK_BINARY_NSIS=$CPACK_BINARY_NSIS -DCPACK_BINARY_RPM=$CPACK_BINARY_RPM -DCPACK_BINARY_STGZ=$CPACK_BINARY_STGZ -DCPACK_BINARY_TBZ2=$CPACK_BINARY_TBZ2 -DCPACK_BINARY_TGZ=$CPACK_BINARY_TGZ -DCPACK_BINARY_TXZ=$CPACK_BINARY_TXZ -DCPACK_BINARY_TZ=$CPACK_BINARY_TZ -DCPACK_SOURCE_RPM=$CPACK_SOURCE_RPM -DCPACK_SOURCE_TBZ2=$CPACK_SOURCE_TBZ2 -DCPACK_SOURCE_TGZ=$CPACK_SOURCE_TGZ -DCPACK_SOURCE_TXZ=$CPACK_SOURCE_TXZ -DCPACK_SOURCE_TZ=$CPACK_SOURCE_TZ -DCPACK_SOURCE_ZIP=$CPACK_SOURCE_ZIP ../

    - name: Build
      working-directory: ./build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --target package --config $BUILD_TYPE

    - name: Archive binary artifacts
      uses: actions/upload-artifact@v2
      with:
          name: OpenStudioApplication-$OS_APP_VERSION.${{ github.sha }}-${{ env.PLATFORM_NAME }}.${{ env.BINARY_EXT }}
          path: build/_CPack_Packages/**/*.${{ env.BINARY_EXT }}

    - name: Archive TGZ artifacts
      uses: actions/upload-artifact@v2
      with:
          name: OpenStudioApplication-$OS_APP_VERSION.${{ github.sha }}-${{ env.PLATFORM_NAME }}.tar.gz
          path: build/_CPack_Packages/**/*.tar.gz

    - name: Test
      working-directory: ./build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
          Xvfb :99 &
          export DISPLAY=:99
          ctest -j -T test --no-compress-output -c $BUILD_TYPE || true

    - name: Archive test results?
      uses: actions/upload-artifact@v2
      with:
          name: OpenStudioApplication-$OS_APP_VERSION.${{ github.sha }}-${{ env.PLATFORM_NAME }}-Test.xml
          path: build/Testing/**/*.xml

